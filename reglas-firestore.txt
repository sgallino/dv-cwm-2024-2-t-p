rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	// Las reglas de seguridad se aplican todas como un "OR".
    // Es decir, si tenemos múltiples "allow" para una misma acción sobre un mismo
    // documento, basta con que un solo "allow" dé "true" para que se permita la acción.
    
    // Es decir, si dejamos un match como el siguiente, no importan en lo absoluto las
    // otras reglas. Siempre todas las acciones se permiten.
    // match /{document=**} {
    // 	allow read, write: if true;
    // }
  
    // Manejo del chat público.
    // Queremos que:
    // Para leer: El usuario deba estar autenticado.
    // Para publicar: El usuario deba estar autenticado y firme el mensaje con sus datos.
    match /public-chat/{message} {
      // allow read, write: if false;
      
      allow read: if request.auth != null;
      
      allow create: if
      	request.auth != null &&
        // El id del usuario autenticado debe ser igual valor del "user_id" que nos mandan 
        // a grabar.
        request.auth.uid == request.resource.data.user_id &&
        // Y hacemos lo mismo con el email.
        request.auth.token.email == request.resource.data.email;
    }
    
    // Manejo de las reglas para el perfil de los usuarios.
    // Queremos que:
    // Para leer: El usuario deba estar autenticado.
    // Para poder escribir: El usuario deba estar autenticado y que sea el "dueño" del 
    // 	documento.
    match /users/{user} {
    	allow read: if request.auth != null;
      
      allow create, update: if
      	request.auth != null &&
        // Comparamos para ver que sean iguales el id del usuario autenticado con el
        // id del documento que se quiere escribir.
        // El id del documento lo sacamos de la variable que escribimos en el match.
      	request.auth.uid == user;
        
      // Se permite la escritura si es un usuario administrador.
      // allow create, update: if
      // 	request.auth != null &&
      //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
    }
    
    // Conversaciones privadas.
    // Queremos que:
    // 	Para leer: El usuario deba estar autenticado y sea parte de la conversación.
    // 	Para publicar: El usuario deba estar autenticado y sea parte de la conversación.
    // Por otra parte, necesitamos poner las reglas de seguridad para los mensajes de cada
    // conversación.
    // Como los mensajes son una "sub-colección" del documento de la conversación, tenemos
    // 2 maneras en que los podemos declarar:
    // a. Como match completo desde la raiz hasta el documento, por ejemplo:
    //	/private-chats/{chat}/messages/{message}
    // b. Podemos poner el match del mensaje anidado en el match del chat, algo así:
    //	match /private-chats/{chat} {
    //		match /messages/{message} {...}
    //	}
    // Para los fines prácticos, ambas formas son idénticas.
    match /private-chats/{chat} {
    	allow read: if
      	request.auth != null &&
        // Con el operador "in" preguntamos si el id del usuario es parte del mapa
        // de "users" del documento.
        request.auth.uid in resource.data.users;
      
      allow create: if
      	request.auth != null &&
        // Preguntamos si el id del usuario figura entre los del nuevo documento.
        request.auth.uid in request.resource.data.users;
        
      // Anidamos las reglas para los mensajes.
      // Queremos que:
      // Para leer: El usuario deba estar autenticado y sea parte de la conversación.
      // Para escribir: El usuario deba estar autenticado, sea parte de la conversación y
      // 	sea quien firma el mensaje.
      match /messages/{message} {
      	allow read: if
          request.auth != null &&
					// Para verificar que somos parte de la conversación, tenemos que preguntar
          // si estamos en la propiedad "users" del documento del "chat". No nos sirve 
          // el documento del "mensaje", por lo que la variable "resource", en este caso,
          // es inservible.
          // Para poder obtener información de *otro* documento que no sea el que está
          // siendo accedido, tenemos que usar alguna de las 2 funciones que Firestore
          // ofrece: get() y exists()
          // https://firebase.google.com/docs/firestore/security/rules-conditions?hl=es-419#access_other_documents
          request.auth.uid in get(/databases/$(database)/documents/private-chats/$(chat)).data.users;
        
        allow create: if
          request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/private-chats/$(chat)).data.users &&
          request.auth.uid == request.resource.data.user_id;
      }
    }
  }
}